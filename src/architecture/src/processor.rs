use crate::opcodes::OpCode;
use crate::opcodes::OpCode::*;
use crate::state::State;
use crate::instructions::*;
use crate::instruction::Instruction;

pub fn determine_processing_unit(opcode: &OpCode) -> fn(&mut State, &Instruction) -> bool {
    match opcode {
        NOP => nop::no_operation,
        LXI => immediate::load_register_pair,
        STAX => not_implemented,
        INX => not_implemented,
        INR => not_implemented,
        DCR => not_implemented,
        MVI => not_implemented,
        RLC => not_implemented,
        DAD => not_implemented,
        LDAX => not_implemented,
        DCX => not_implemented,
        RRC => not_implemented,
        RAL => not_implemented,
        RAR => not_implemented,
        RIM => not_implemented,
        SHLD => not_implemented,
        DAA => not_implemented,
        LHLD => not_implemented,
        CMA => not_implemented,
        SIM => not_implemented,
        STA => not_implemented,
        STC => not_implemented,
        LDA => not_implemented,
        CMC => not_implemented,
        MOV => not_implemented,
        HLT => not_implemented,
        ADD => not_implemented,
        ADC => not_implemented,
        SUB => not_implemented,
        SBB => not_implemented,
        ANA => not_implemented,
        XRA => not_implemented,
        ORA => not_implemented,
        CMP => not_implemented,
        RNZ => not_implemented,
        POP => not_implemented,
        JNZ => jump::no_zero,
        JMP => jump::default,
        CNZ => not_implemented,
        PUSH => not_implemented,
        ADI => not_implemented,
        RST => not_implemented,
        RZ => not_implemented,
        RET => not_implemented,
        JZ => jump::zero,
        CZ => not_implemented,
        CALL => not_implemented,
        ACI => not_implemented,
        RNC => not_implemented,
        JNC => jump::no_carry,
        OUT => not_implemented,
        CNC => not_implemented,
        SUI => not_implemented,
        RC => not_implemented,
        JC => jump::carry,
        IN => not_implemented,
        CC => not_implemented,
        SBI => not_implemented,
        RPO => not_implemented,
        JPO => jump::parity_odd,
        XTHL => not_implemented,
        CPO => not_implemented,
        ANI => not_implemented,
        RPE => not_implemented,
        PCHL => not_implemented,
        JPE => jump::parity_even,
        XCHG => not_implemented,
        CPE => not_implemented,
        XRI => not_implemented,
        RP => not_implemented,
        JP => jump::positive,
        DI => not_implemented,
        CP => not_implemented,
        ORI => not_implemented,
        RM => not_implemented,
        SPHL => not_implemented,
        JM => jump::minus,
        EI => not_implemented,
        CM => not_implemented,
        CPI => not_implemented,
    }
}